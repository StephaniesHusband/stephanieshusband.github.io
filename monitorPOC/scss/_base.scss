$redesign-blue:              #1F7DA4;
$senseaware-red:             #E5173F;
$senseaware-yellow:          #FFA500;
$senseaware-green:           #006400;
$senseaware-light-gray:      #E8E8E8;
$senseaware-gray:            #CCC;
$senseaware-medium-gray:     #999;
$senseaware-dark-gray:       #666;
$senseaware-super-dark-gray: #333;

@mixin h_gutter($size) {
   & > * {
      margin: 0 $size/2;

      &:first-child {
         margin-left: 0;
      }
      &:last-child {
         margin-right: 0;
      }
   }
}
@mixin v_gutter($size) {
   & > * {
      margin: $size/2 0;

      &:first-child {
         margin-top: 0;
      }
      &:last-child {
         margin-bottom: 0;
      }
   }
}

html {
   height: 100%;
   background-color: black;
}

* { // reset
   margin: 0;
   padding: 0;
   box-sizing: border-box;
}
body {
   font-family: "Arial Narrow", Arial, Helvetica, sans-serif;
   height: 100%;
   display: flex;
   flex-direction: column;
}

a {
   text-decoration: none;
   color: $redesign_blue;
}
.textbox {
   padding: 0;
   margin: 0;
   height: 30px; 
}
.inline {
   display: inline-block;
}
.radio {
   cursor: pointer;

   & input[type="radio"] {
      margin: 0px 5px 0px 0px;
      vertical-align: middle;
      flex-shrink: 0;
      background-color: #fff;
      position: relative;
      left: 0;
      top:-1px;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      border: 1px solid #585858;
      border-radius: 20px;
      height: 18px;
      width: 18px;
      outline: 0; /* puts square focus rect around the round control if omitted, handle focus by changing border color */
      z-index: 9;

      &:checked {
         background: #fff;

         &:after {
            display: block;
            content: "";
            position: relative;
            top: 50%;
            left: 50%;
            margin: -5px 0 0 -5px;
            background: $redesign-blue;
            border-radius: 20px;
            height: 10px;
            width: 10px;
         }
      }
   }
}
.checkbox {
   cursor: pointer;
   display: flex;
   justify-content: flex-start;
   align-items: center;

   input {
      background: #fff;
      border: 1px solid #585858;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      min-height: 18px;
      min-width: 18px;
      margin-right: 5px;
      outline: 0;
      position: relative; /* NOTE:003 - this is purely to allow the checkbox to appear over and outside the bounds of
                           * the box itself. If this UX is not really desired we can remove this. SERWIN */

      &:checked:after {
         content: "\2713";
         font-size: 24px;
         font-weight: bold;
         color: $redesign-blue;
         line-height: 17px;
         position: absolute;     /* See NOTE:003 */
         left: 50%;              /* See NOTE:003 */
         top: 50%;               /* See NOTE:003 */
         margin: -11px 0 0 -6px; /* See NOTE:003 */
      }

      // not using hyphen to escape selectors using: [class*="icon-"]
      &.iconcheckbox {
         display: none;

         ~ [class*="icon-"]:before {
            font-size: 18px;
            color: $senseaware-gray;
            margin-right: 5px;
         }

         &:checked ~ [class*="icon-"]:before {
            color: $redesign-blue;
         }

         &.lg ~ [class*="icon-"]:before {
            font-size: 22px;
         }
      }
   }

   &.only {
      justify-content: center;
      input {
         margin-left: 0;
         margin-right: 0;
      }
   }

   & input:disabled:not(.readonly),
   & input:disabled:not(.readonly) + label {
      border-color: $senseaware-gray;
      color: $senseaware-gray;

      &:checked:after {
         color: $senseaware-gray;
      }

      &.iconcheckbox ~ [class*="icon-"] {
         opacity: 0.5;
      }
   }

   /* separated from above for reason explained in note below */
   & input:disabled {
      pointer-events: none;
   }

   &.disabled {
      color: $senseaware-gray;
      pointer-events: none;

      input {
         border-color: $senseaware-gray;

         &:checked:after {
            color: $senseaware-gray;
         }
      }

      .iconcheckbox ~ [class*="icon-"] {
         pointer-events: none;
         opacity: 0.5;
      }

      /* NOTE if your label is a label-info (link) you still will want the pointer-events so that's why the
       * pointer-events:none is on the input and not the entire checkbox control. But if your label is a mix (has a link
       * contained in regular text AND you have the label:for hooked up, you will still receive the check/uncheck pointer
       * event so you'll need to disable manually for those cases or remove the label:for ability */
   }

   &.readonly {
      /* NOTE Preventing pointer events at the wrapper level.  Doing this will not provide the same functionality as disabled
       * where you may want the labels to listen for clicks due to links. See styleguide for example readonly with link
       */
      pointer-events: none;

      input {
         border-color: $senseaware-gray;
      }
   }

   & input.readonly {
      border-color: $senseaware-gray;
   }

   /* only applicable if used in conjunction with checkbox class */
   &.label-first {
      flex-direction: row-reverse;
      justify-content: flex-end;

      .iconcheckbox ~ [class*="icon-"]:before,
      input {
         margin-left: 5px; /* reverse margin too */
         margin-right: 0;
      }
   }
}

.button {
   cursor: pointer;
   color: white;
   height: 30px;
   line-height: 30px;
   min-width: 30px;
   text-align: center;
   font-size: 1.5em;
   background: $redesign_blue;

   &.button_secondary {
      background: $senseaware-dark-gray;
      font-size: 1em;
   }

   &.button_primary {
      background: $redesign_blue;
      font-size: 1em;
   }
}

.dropdown {
   cursor: pointer;
   height: 30px;
   color: $redesign_blue;
   background: lightgray;
   display: flex;
   justify-content: center;
   align-items: center;
   width: auto; 
   max-width: 130px;
   padding: 0 5px;
}

.module {
   background: white;

   h2 {
      display: flex;
      justify-content: space-between;
      align-items: center;
      height: 35px;
      background: black;
      color: white;
      vertical-align: middle;
      padding: 5px 0 5px 10px;
      text-transform: uppercase;
      font-size: .8em;
   }
}
table {
   border: 1px solid gray;
   tr { height: 30px; } 
   tr:nth-child(even) { background-color: lightgray; }
   width: 100%;
}

#theMap {
   text-align: center;
   background-color: lightblue;
}

#footer {
   background: lightgray;
   text-align: center;
}

#radio-group-type {
   display: inline-block;
   whitespace: nowrap;
}

.placard-list > div {
   padding: 5px;
   min-height: 112px; /* same as SA */
   background: white;
   border-bottom: 1px solid lightgray;

   &:first-child {
      border-top: 1px solid lightgray;
   }
}

.dropdown-dlg {
   display: inline-block;
   position: relative;

   .dd-button {
      display: inline-block;
      padding: 10px 30px 10px 20px;
      background-color: $senseaware-light-gray;
      cursor: pointer;
      white-space: nowrap;

      &:after { // the arrow
         content: "";
         position: absolute;
         top: 50%;
         right: 15px;
         transform: translateY(-50%);
         width: 0;
         height: 0;
         border-left: 5px solid transparent;
         border-right: 5px solid transparent;
         border-top: 5px solid black;
      }

      &:hover {
         background-color: darken($senseaware-light-gray, 20%);
      }
   }

   .dd-body {
      display: none;
      flex-direction: column;

      position: absolute; // make appear on top of everything else
      top: 100%;
      box-shadow: 0 0 6px 0 rgba(0,0,0,0.1);
      background-color: white;
   }

   &.dd-open .dd-body {
      display: flex;
   }

   // If you know it's always right aligned add this class to parent, else switch with media queries
   .dropdown-dlg.right-aligned .dd-body {
      left: auto;
      right: 0;
   }
}
